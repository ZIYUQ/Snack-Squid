<link type="text/css" rel="stylesheet" href="https://api.mqcdn.com/sdk/mapquest-js/v1.3.2/mapquest.css" />
<link rel="stylesheet" href="/customer/css/menu.css">

<section id="findVan">


    <main class='map-container' id=>


        <section id='map'>
        </section>

        <section class='location'>

            <div class="top-bar">

                <a href="/customer">
                    <div id="icon-map" class="icon"></div>
                </a>
                                
                <div class="mapvan"></div>

                <a id="map-profile" class="profile" href="/customer/profile"><i class="fas fa-user-circle"></i></a>

            </div>

            <div class="vanContainer">
                {{#each Vans}}
                <div class="vanListing">
                    <div class="oneVan">
                        <p class="vanName">{{this.vanName}}</p>
                        <p class="vanLocation">{{this.textLocation}}</p>
                        <p class="geoLocation" hidden>{{this.location}}</p>
                        <br>
                    </div>
                </div>
                <div id="lineMap" class="line"></div>

                {{/each}}
            </div>

        </section>
    </main>



    <script type="text/javascript">
        //sendLocation()
        let vans = document.querySelectorAll('.vanListing')

        window.onload = async function () {
            L.mapquest.key = 'A1HigpvtAiVmfrECeAqUXlsnN6wDUshM';
            let vans = document.querySelectorAll('.vanListing')
            var mapquest = L.mapquest
            var map = L.mapquest.map('map', {
                center: [-37.816166, 144.966639],
                layers: L.mapquest.tileLayer('map'),
                zoom: 15
            });
            geoFindMe(map)
        }

        for (let i = 0; i < vans.length; i++) {
            let vanName = vans[i].querySelector('.vanName').innerHTML
            let vanbtn = vans[i].querySelector(".oneVan")
            vanbtn.addEventListener('click', function () {

                const options = {
                    method: 'POST',
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ 'vanName': vanName }),
                    redirect: 'follow'
                }
                try {
                    url = window.location.href + '/' + vanName
                    fetch(url, options).then(res => {
                        if (res.redirected) {
                            window.location.href = "/customer/menu/van=" + vanName
                        }
                    })
                }
                catch (err) {
                    console.log(err)
                }
            })
        }

        function geoFindMe(map) {
            function success(position) {
                const latitude = -37.816166 //position.coords.latitude.toFixed(4);
                const longitude = 144.966639  //position.coords.longitude.toFixed(4);
                coordinate = [latitude, longitude]
                L.mapquest.textMarker(coordinate, {
                    text: 'Me',
                    position: 'right',
                    type: 'marker',
                    title: 'Me',
                    icon: {
                        primaryColor: 'ff0000',
                        secondaryColor: '#ff0000',
                        size: 'sm'
                    }
                }).addTo(map);
                dict = {}
                // find five vans have least distances
                for (i = 0; i < vans.length; i++) {
                    let vanName = vans[i].querySelector('.vanName').innerHTML
                    let vanLocation = vans[i].querySelector('.geoLocation').innerHTML
                    let textLocation = vans[i].querySelector('.vanLocation').innerHTML
                    let vancoord = [JSON.parse(vanLocation).latitude, JSON.parse(vanLocation).longitude]
                    dict[[vanName, textLocation, vancoord]] = getdistance(coordinate, vancoord)
                }
                //  get sorted vans
                let sorted = sortObject(dict)
                console.log(sorted)
                let vanContainer = document.querySelector('.vanContainer')
                vanContainer.innerHTML = ``
                // change innerHTML
                for (i = 0; i < sorted.length; i++) {
                    let vanName = sorted[i].split(',')[0]
                    let textLocation = sorted[i].split(',').slice(1, sorted[i].split(',').length - 2).join(',')

                    let latitude = sorted[i].split(',')[sorted[i].split(',').length - 2]
                    let longitude = sorted[i].split(',')[sorted[i].split(',').length - 1]

                    vanContainer.innerHTML += `
                    <div class="vanListing">
                        <div class="oneVan">
                            <p class="vanName">${vanName}</p>
                            <p class="vanLocation">${textLocation}</p>
                            <br>
                        </div>
                    </div>
                    <div id="lineMap" class="line"></div>`
                    coordinate = [latitude, longitude]
                    // add markers to map
                    L.mapquest.textMarker(coordinate, {
                        text: vanName,
                        position: 'right',
                        type: 'marker',
                        title: vanName,
                        icon: {
                            primaryColor: '#333333',
                            secondaryColor: '#333333',
                            size: 'sm'
                        }
                    }).addTo(map);
                }
            }
            function error() {
                alert('Unable to retrieve your location');
            }

            if (!navigator.geolocation) {
                console.log('Geolocation is not supported by your browser');
            } else {
                console.log('Locatingâ€¦');
                navigator.geolocation.getCurrentPosition(success, error);

            }
        }

        const getdistance = (cusLocation, vanLocation) => {
            let distance = Math.sqrt(Math.pow((cusLocation[0] - vanLocation[0]), 2) +
                Math.pow((cusLocation[1] - vanLocation[1]), 2))
            return distance
        }
        const sortObject = (dict) => {
            let keys = Object.keys(dict);

            let i, len = keys.length;
            keys.sort();

            let sortedDict = [];
            if (len > 5) {
                len = 5
            }
            //Now let's go throught your keys in the sorted order
            for (i = 0; i < len; i++) {
                //get the current key
                k = keys[i];
                sortedDict[i] = k;
            }
            return sortedDict
        }
    </script>



</section>
<script src="https://api.mqcdn.com/sdk/mapquest-js/v1.3.2/mapquest.js"></script>